//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Web.Http;
using Synapse.Core;
using Synapse.Services;

namespace Synapse.Custom
{
    [RoutePrefix( "my/route" )]
    public class CustomController : ApiController
    {
        [HttpGet]
        [Route( "hello" )]
        public string Hello()
        {
            return "Hello from CustomController, World!";
        }

        [HttpGet]
        [Route( "hello/whoami" )]
        public string WhoAmI()
        {
            return ExtensibilityUtility.GetExecuteControllerInstance( null, null, null ).WhoAmI();
        }

        [HttpGet]
        [Route( "custom/path" )]
        public object MyCustomMethod()
        {
            string foo = "foo";

            return (object)StartPlan( planUniqueName: "sampleHtml", serializationType: SerializationType.Html, pollingIntervalSeconds: 2, timeoutSeconds: 10 );
        }

        [HttpGet]
        [Route( "custom/path2" )]
        public object MyCustomMethod2(string aaa, string bbb, string ccc = "foo")
        {
            return (object)StartPlan( planUniqueName: "samplePs1", serializationType: SerializationType.Unspecified );
        }

        [HttpPost]
        [Route( "custom/{route}/path" )]
        public long MyCustomMethod3(string route, string aaa, string bbb, string ccc = "foo")
        {
            return (long)StartPlan( planUniqueName: "samplePs1", executeAsync: true );
        }

        IExecuteController GetExecuteControllerInstance()
        {
            System.Net.Http.Headers.AuthenticationHeaderValue auth = null;
            if( Request != null )
                if( Request.Headers != null )
                    auth = Request.Headers.Authorization;

            return ExtensibilityUtility.GetExecuteControllerInstance( Url, User, auth );
        }

        object StartPlan(string planUniqueName, string path = "Actions[0]:Result:ExitData",
            SerializationType serializationType = SerializationType.Json, bool setContentType = true,
            int pollingIntervalSeconds = 1, int timeoutSeconds = 120, string nodeRootUrl = null, bool executeAsync = false)
        {
            StartPlanEnvelope pe = new StartPlanEnvelope { DynamicParameters = new Dictionary<string, string>( StringComparer.OrdinalIgnoreCase ) };

            IEnumerable<KeyValuePair<string, string>> queryString = this.Request.GetQueryNameValuePairs();
            foreach( KeyValuePair<string, string> kvp in queryString )
                pe.DynamicParameters.Add( kvp.Key, kvp.Value );

            string body = "body";
            if( Url.Request.Properties.ContainsKey( body ) && Url.Request.Properties[body] != null )
                pe.DynamicParameters["requestBody"] = Url.Request.Properties[body].ToString();

            string dryrun = "dryRun";
            bool dryRun = false;
            if( pe.DynamicParameters.ContainsKey( dryrun ) )
                bool.TryParse( pe.DynamicParameters[dryrun], out dryRun );

            string requestnumber = "requestNumber";
            string requestNumber = null;
            if( pe.DynamicParameters.ContainsKey( requestnumber ) )
                requestNumber = pe.DynamicParameters[requestnumber];

            if( executeAsync )
                return GetExecuteControllerInstance().StartPlan( planEnvelope: pe,
                    planUniqueName: planUniqueName, dryRun: dryRun, requestNumber: requestNumber, nodeRootUrl: nodeRootUrl );
            else
                return GetExecuteControllerInstance().StartPlanSync( planEnvelope: pe,
                    planUniqueName: planUniqueName, dryRun: dryRun, requestNumber: requestNumber,
                    path: path, serializationType: serializationType, setContentType: setContentType,
                    pollingIntervalSeconds: pollingIntervalSeconds, timeoutSeconds: timeoutSeconds, nodeRootUrl: nodeRootUrl );
        }
    }
}